configfile: "SCRIPTS/config.yaml"

RAW_DIR = config["raw_dir"]
REF_DIR = config["ref_dir"]
RES_DIR = config["res_dir"]
LOG_DIR = config["log_dir"]
BEN_DIR = config["ben_dir"]

trim = str(config["trim"])
genomeSize = str(config["genome_size"])
filesP15 = ["P15.1_RB01", "P15.2_RB02", "P15.3_RB03", "P15.4_RB01", "P15.5_RB02", "P15.6_RB04", "P15.7_RB03", "P15.8_RB05", "P15.9_RB04", "P15.10_RB05"]
filesP30 = ["P30.1_RB06", "P30.2_RB07", "P30.3_RB08", "P30.4_RB06", "P30.5_RB07", "P30.6_RB08", "P30.6_RB09", "P30.7_RB10", "P30.8_RB10", "P30.9_RB11", "P30.10_RB12"]

rule all:
	input:
		# vcf
		expand(RES_DIR + "P15/{sample}/{sample}.trimed" + trim + ".mapped.sorted.vcf", sample=filesP15),
		expand(RES_DIR + "P30/{sample}/{sample}.trimed" + trim + ".mapped.sorted.vcf", sample=filesP30),
#		# flagstat
#		expand(RES_DIR + "P15/{sample}/{sample}.trimed" + trim + ".mapped.sorted.flagstat", sample=filesP15),
#		expand(RES_DIR + "P30/{sample}/{sample}.trimed" + trim + ".mapped.sorted.flagstat", sample=filesP30),
#		# bai
#		expand(RES_DIR + "P15/{sample}/{sample}.trimed" + trim + ".mapped.sorted.bam.bai", sample=filesP15),
#		expand(RES_DIR + "P30/{sample}/{sample}.trimed" + trim + ".mapped.sorted.bam.bai", sample=filesP30),
#		# bedgraph
#		expand(RES_DIR + "P15/{sample}/{sample}.trimed" + trim + ".mapped.sorted.bedgraph", sample=filesP15),
#		expand(RES_DIR + "P30/{sample}/{sample}.trimed" + trim + ".mapped.sorted.bedgraph", sample=filesP30),
#		# pdf
#		expand(RES_DIR + "P15/{sample}/{sample}.trimed" + trim + ".mapped.sorted.pdf", sample=filesP15),
#		expand(RES_DIR + "P30/{sample}/{sample}.trimed" + trim + ".mapped.sorted.pdf", sample=filesP30)
	benchmark:
		BEN_DIR + "all.txt"

rule seqkit_trim:
	input:
		raw=RAW_DIR + "{P}/{sample}.fastq.gz"
	output:
		trimed=protected(RAW_DIR + "{P}/{sample}.trimed" + trim + ".fastq.gz")
	log:
		out=LOG_DIR + "SEQKIT/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "SEQKIT/{P}/{sample}.txt"
	threads: 2
	shell:
		"""
		seqkit seq -m {trim} {input.raw} -o {output.trimed} 2> {log.out}
		"""

rule minimap2:
	input:
		read=rules.seqkit_trim.output,
		ref=REF_DIR + config["ref_file"]
	output:
		sam=temp(RES_DIR + "{P}/{sample}/{sample}.trimed" + trim + ".sam")
	log:
		out=LOG_DIR + "MINIMAP2/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "MINIMAP2/{P}/{sample}.txt"
	threads: 4
	shell:
		"""
		minimap2 --MD -ax map-ont -t {threads} {input.ref} {input.read} -o {output.sam} 2> {log.out}
		"""

rule samtools_view:
	input:
		sam=rules.minimap2.output
	output:
		mapped=temp(RES_DIR + "{P}/{sample}/{sample}.trimed" + trim + ".mapped.bam")
	log:
		out=LOG_DIR + "SAMTOOLS/VIEW/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "SAMTOOLS/VIEW/{P}/{sample}.txt"
	threads: 2
	shell:
		"""
		samtools view -uhbS -@ {threads} -F 4 {input.sam} -o {output.mapped} 2> {log.out}
		"""

rule samtools_sort:
	input:
		mapped=rules.samtools_view.output
	output:
		sorted=protected(RES_DIR + "{P}/{sample}/{sample}.trimed" + trim + ".mapped.sorted.bam")
	log:
		out=LOG_DIR + "SAMTOOLS/SORT/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "SAMTOOLS/SORT/{P}/{sample}.txt"
	threads: 2
	shell:
		"""
		samtools sort -l 0 -@ {threads} {input.mapped} -o {output.sorted} 2> {log.out}
		"""

rule samtools_flagstat:
	input:
		sorted=rules.minimap2.output
	output:
		stats=protected(RES_DIR + "{P}/{sample}/{sample}.trimed" + trim + ".flagstat")
	log:
		out=LOG_DIR + "SAMTOOLS/FLAGSTAT/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "SAMTOOLS/FLAGSTAT/{P}/{sample}.txt"
	threads: 2
	shell:
		"""
		samtools flagstat -@ {threads} {input.sorted} > {output.stats} 2> {log.out}
		"""

rule samtools_index:
	input:
		sorted=rules.samtools_sort.output
	output:
		index=protected(RES_DIR + "{P}/{sample}/{sample}.trimed" + trim + ".mapped.sorted.bam.bai")
	log:
		out=LOG_DIR + "SAMTOOLS/INDEX/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "SAMTOOLS/INDEX/{P}/{sample}.txt"
	threads: 2
	shell:
		"""
		samtools index -@ {threads} {input.sorted} 2> {log.out}
		"""

rule bam_coverage:
	input:
		sorted=rules.samtools_sort.output
	output:
		bedgraph=protected(RES_DIR + "{P}/{sample}/{sample}.trimed" + trim + ".mapped.sorted.bedgraph")
	log:
		out=LOG_DIR + "DEEPTOOLS/COVERAGE/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "DEEPTOOLS/COVERAGE/{P}/{sample}.txt"
	threads: 4
	shell:
		"""
		bamCoverage -p {threads} -b {input.sorted} -of "bedgraph" --effectiveGenomeSize {genomeSize} --normalizeUsing RPGC -o {output.bedgraph} 2> {log.out}
		"""

rule plot_coverage:
	input:
		sorted=rules.samtools_sort.output
	output:
		pdf=protected(RES_DIR + "{P}/{sample}/{sample}.trimed" + trim + ".mapped.sorted.pdf")
	log:
		out=LOG_DIR + "DEEPTOOLS/PLOT/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "DEEPTOOLS/PLOT/{P}/{sample}.txt"
	threads: 8
	shell:
		"""
		plotCoverage -p {threads} -b {input.sorted} --smartLabels --plotFileFormat pdf -o {output.pdf} 2> {log.out}
		"""

rule sniffles:
	input:
		sorted=rules.samtools_sort.output,
		bai=rules.samtools_index.output
	output:
		vcf=protected(RES_DIR + "{P}/{sample}/{sample}.trimed" + trim + ".mapped.sorted.vcf")
	log:
		out=LOG_DIR + "SNIFFLES/{P}/{sample}.log"
	benchmark:
		BEN_DIR + "SNIFFLES/{P}/{sample}.txt"
	threads: 4
	shell:
		"""
		sniffles -t {threads} -i {input.sorted} --minsvlen 30 --minsupport 10 -v {output.vcf} 2> {log.out}
		"""

# -l 30 -s 10 -f 0.1 --genotype 
